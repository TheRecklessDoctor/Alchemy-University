{"ast":null,"code":"var _jsxFileName = \"/Users/dayanperera/Documents/Programming/AlchemyUniversity/blockexplorer/src/App.js\",\n  _s = $RefreshSig$();\nimport { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\nimport './App.css';\n// import { ListItem, ListItemText } from '@mui/material';\n// import List from '@mui/material/List';\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET\n};\n\n// In this week's lessons we used ethers.js. Here we are using the\n// Alchemy SDK is an umbrella library with several different packages.\n//\n// You can read more about the packages here:\n//   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\nfunction App() {\n  _s();\n  const [blockNumber, setBlockNumber] = useState();\n  const [blockDetails, setBlockDetails] = useState();\n  const [blockTransactions, setBlockTransactions] = useState([]);\n  const [transactionType, setTransactionType] = useState([]);\n  const [combinedArray, setCombinedArray] = useState([]);\n  useEffect(() => {\n    async function getBlockNumber() {\n      setBlockNumber(await alchemy.core.getBlockNumber());\n    }\n    getBlockNumber();\n  }, []);\n  useEffect(() => {\n    async function getBlockDetails() {\n      try {\n        let listTransactions = [];\n        const data = await alchemy.core.getBlockWithTransactions(blockNumber);\n        console.log(data);\n        data[\"transactions\"].forEach((transaction, index) => {\n          listTransactions.push(transaction.hash);\n        });\n        setBlockDetails(data);\n        setBlockTransactions(listTransactions);\n      } catch (error) {\n        setBlockDetails([]);\n      }\n    }\n    let types = [];\n    getBlockDetails();\n\n    // console.log(blockTransactions);\n  }, [blockNumber, setBlockDetails, setBlockTransactions, blockTransactions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BlockDetails\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Block Number: \", blockNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Time stamp: \", !blockDetails ? 'Loading' : blockDetails['timestamp']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Miner: \", !blockDetails ? 'Loading' : blockDetails['miner']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"TransactionsList\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction Hash\"\n          }, \"transaction\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, \"type\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: combinedArray.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"item\",\n              children: value[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"item\",\n              children: value[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 11\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"E2ykaHlafWogsmi1H2tci76fahc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Alchemy","Network","useEffect","useState","settings","apiKey","process","env","REACT_APP_ALCHEMY_API_KEY","network","ETH_MAINNET","alchemy","App","blockNumber","setBlockNumber","blockDetails","setBlockDetails","blockTransactions","setBlockTransactions","transactionType","setTransactionType","combinedArray","setCombinedArray","getBlockNumber","core","getBlockDetails","listTransactions","data","getBlockWithTransactions","console","log","forEach","transaction","index","push","hash","error","types","map","value"],"sources":["/Users/dayanperera/Documents/Programming/AlchemyUniversity/blockexplorer/src/App.js"],"sourcesContent":["import { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\n\nimport './App.css';\n// import { ListItem, ListItemText } from '@mui/material';\n// import List from '@mui/material/List';\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET,\n};\n\n\n// In this week's lessons we used ethers.js. Here we are using the\n// Alchemy SDK is an umbrella library with several different packages.\n//\n// You can read more about the packages here:\n//   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\n\nfunction App() {\n  const [blockNumber, setBlockNumber] = useState();\n  const [blockDetails, setBlockDetails] = useState();\n  const [blockTransactions, setBlockTransactions] = useState([]);\n  const [transactionType, setTransactionType] = useState([]);\n  const [combinedArray, setCombinedArray] = useState([]);\n\n  useEffect(() => {\n\n    async function getBlockNumber() {\n      setBlockNumber(await alchemy.core.getBlockNumber());\n    }\n    getBlockNumber();\n\n  }, []);\n\n  useEffect(() => {\n    async function getBlockDetails(){\n      try{\n        let listTransactions = [];\n        const data = await alchemy.core.getBlockWithTransactions(blockNumber);\n        console.log(data);\n        data[\"transactions\"].forEach((transaction, index)=>{\n          listTransactions.push(transaction.hash);\n        });\n        setBlockDetails(data);\n        setBlockTransactions(listTransactions);\n      }catch(error){\n        setBlockDetails([]);\n      }\n    }\n\n    let types=[];\n\n\n    getBlockDetails();\n\n    // console.log(blockTransactions);\n  }, [blockNumber, setBlockDetails, setBlockTransactions, blockTransactions]);\n\n  return(\n  <div className='App'>\n    <div className=\"BlockDetails\">\n      <div className='item'>Block Number: {blockNumber}</div>\n      <div className='item'>Time stamp: {!blockDetails ? 'Loading' : blockDetails['timestamp']}</div> \n      <div className='item'>Miner: {!blockDetails ? 'Loading' : blockDetails['miner']}</div>\n    </div>\n    <table className='TransactionsList'>\n      <thead>\n        <tr>\n          <th key={\"transaction\"}>Transaction Hash</th>\n          <th key={\"type\"}>Type</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n      combinedArray.map((value, index)=> {\n       return(\n       <tr key={index}>\n          <td  className=\"item\">{value[0]}</td>\n          <td  className=\"item\">{value[1]}</td>\n        </tr>\n        )\n       \n    })\n      }\n      </tbody>\n    </table>\n  </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}