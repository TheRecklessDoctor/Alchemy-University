{"ast":null,"code":"var _jsxFileName = \"/Users/dayanperera/Documents/Programming/AlchemyUniversity/blockexplorer/src/App.js\",\n  _s = $RefreshSig$();\nimport { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\nimport './App.css';\n// import { ListItem, ListItemText } from '@mui/material';\n// import List from '@mui/material/List';\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET\n};\n\n// In this week's lessons we used ethers.js. Here we are using the\n// Alchemy SDK is an umbrella library with several different packages.\n//\n// You can read more about the packages here:\n//   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\nfunction App() {\n  _s();\n  const [blockNumber, setBlockNumber] = useState();\n  const [blockDetails, setBlockDetails] = useState();\n  let listTransactions = [];\n  useEffect(() => {\n    async function getBlockNumber() {\n      setBlockNumber(await alchemy.core.getBlockNumber());\n    }\n    getBlockNumber();\n    async function getBlockDetails(blockNumber) {\n      const data = await alchemy.core.getBlock(blockNumber);\n      setBlockDetails(data);\n    }\n    getBlockDetails(blockNumber);\n    async function getBlockTransactions(blockNumber) {\n      const blockWithTransactions = await alchemy.core.getBlockWithTransactions(blockNumber);\n      blockWithTransactions[\"transactions\"].forEach((transaction, index) => {\n        listTransactions.push(transaction['hash']);\n      });\n      console.log(listTransactions);\n    }\n    getBlockTransactions(blockNumber);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BlockDetails\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Block Number: \", blockNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Time stamp: \", !blockDetails ? 'Loading' : blockDetails['timestamp']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Miner: \", !blockDetails ? 'Loading' : blockDetails['miner']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: listTransactions.map(value => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"7TohC2L1rcYg/6XjtYNhno5JdaQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Alchemy","Network","useEffect","useState","settings","apiKey","process","env","REACT_APP_ALCHEMY_API_KEY","network","ETH_MAINNET","alchemy","App","blockNumber","setBlockNumber","blockDetails","setBlockDetails","listTransactions","getBlockNumber","core","getBlockDetails","data","getBlock","getBlockTransactions","blockWithTransactions","getBlockWithTransactions","forEach","transaction","index","push","console","log","map","value"],"sources":["/Users/dayanperera/Documents/Programming/AlchemyUniversity/blockexplorer/src/App.js"],"sourcesContent":["import { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\n\nimport './App.css';\n// import { ListItem, ListItemText } from '@mui/material';\n// import List from '@mui/material/List';\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET,\n};\n\n\n// In this week's lessons we used ethers.js. Here we are using the\n// Alchemy SDK is an umbrella library with several different packages.\n//\n// You can read more about the packages here:\n//   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\n\nfunction App() {\n  const [blockNumber, setBlockNumber] = useState();\n  const [blockDetails, setBlockDetails] = useState();\n  let listTransactions = [];\n\n  useEffect(() => {\n\n    async function getBlockNumber() {\n      setBlockNumber(await alchemy.core.getBlockNumber());\n    }\n    getBlockNumber();\n\n    async function getBlockDetails(blockNumber){\n      const data = await alchemy.core.getBlock(blockNumber)\n      setBlockDetails(data);\n    }\n    getBlockDetails(blockNumber);\n\n    async function getBlockTransactions(blockNumber){\n      const blockWithTransactions = await alchemy.core.getBlockWithTransactions(blockNumber);\n      blockWithTransactions[\"transactions\"].forEach((transaction, index)=>{\n        listTransactions.push(transaction['hash']);\n      });\n\n      console.log(listTransactions);\n    }\n    getBlockTransactions(blockNumber);\n\n\n\n  });\n\n  return(\n  <div className='App'>\n    <div className=\"BlockDetails\">\n      <div className='item'>Block Number: {blockNumber}</div>\n      <div className='item'>Time stamp: {!blockDetails ? 'Loading' : blockDetails['timestamp']}</div> \n      <div className='item'>Miner: {!blockDetails ? 'Loading' : blockDetails['miner']}</div>\n    </div>\n    <ul>\n      {\n      listTransactions.map((value)=> (\n        <li>{value}</li>\n      ))\n      }\n    </ul>\n  </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,OAAO,QAAQ,aAAa;AAC9C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAO,WAAW;AAClB;AACA;;AAEA;AACA;AACA;AAAA;AACA,MAAMC,QAAQ,GAAG;EACfC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB;EAC7CC,OAAO,EAAER,OAAO,CAACS;AACnB,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,IAAIX,OAAO,CAACI,QAAQ,CAAC;AAErC,SAASQ,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,EAAE;EAChD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,EAAE;EAClD,IAAIc,gBAAgB,GAAG,EAAE;EAEzBf,SAAS,CAAC,MAAM;IAEd,eAAegB,cAAc,GAAG;MAC9BJ,cAAc,CAAC,MAAMH,OAAO,CAACQ,IAAI,CAACD,cAAc,EAAE,CAAC;IACrD;IACAA,cAAc,EAAE;IAEhB,eAAeE,eAAe,CAACP,WAAW,EAAC;MACzC,MAAMQ,IAAI,GAAG,MAAMV,OAAO,CAACQ,IAAI,CAACG,QAAQ,CAACT,WAAW,CAAC;MACrDG,eAAe,CAACK,IAAI,CAAC;IACvB;IACAD,eAAe,CAACP,WAAW,CAAC;IAE5B,eAAeU,oBAAoB,CAACV,WAAW,EAAC;MAC9C,MAAMW,qBAAqB,GAAG,MAAMb,OAAO,CAACQ,IAAI,CAACM,wBAAwB,CAACZ,WAAW,CAAC;MACtFW,qBAAqB,CAAC,cAAc,CAAC,CAACE,OAAO,CAAC,CAACC,WAAW,EAAEC,KAAK,KAAG;QAClEX,gBAAgB,CAACY,IAAI,CAACF,WAAW,CAAC,MAAM,CAAC,CAAC;MAC5C,CAAC,CAAC;MAEFG,OAAO,CAACC,GAAG,CAACd,gBAAgB,CAAC;IAC/B;IACAM,oBAAoB,CAACV,WAAW,CAAC;EAInC,CAAC,CAAC;EAEF,oBACA;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAK,SAAS,EAAC,cAAc;MAAA,wBAC3B;QAAK,SAAS,EAAC,MAAM;QAAA,6BAAgBA,WAAW;MAAA;QAAA;QAAA;QAAA;MAAA,QAAO,eACvD;QAAK,SAAS,EAAC,MAAM;QAAA,2BAAc,CAACE,YAAY,GAAG,SAAS,GAAGA,YAAY,CAAC,WAAW,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAO,eAC/F;QAAK,SAAS,EAAC,MAAM;QAAA,sBAAS,CAACA,YAAY,GAAG,SAAS,GAAGA,YAAY,CAAC,OAAO,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAClF,eACN;MAAA,UAEEE,gBAAgB,CAACe,GAAG,CAAEC,KAAK,iBACzB;QAAA,UAAKA;MAAK;QAAA;QAAA;QAAA;MAAA,QACX;IAAC;MAAA;MAAA;MAAA;IAAA,QAEC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAER;AAAC,GAhDQrB,GAAG;AAAA,KAAHA,GAAG;AAkDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}