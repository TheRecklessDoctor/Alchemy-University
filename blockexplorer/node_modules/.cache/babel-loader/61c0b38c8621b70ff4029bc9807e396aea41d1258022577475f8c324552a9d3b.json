{"ast":null,"code":"var _jsxFileName = \"/Users/dayanperera/Documents/Programming/AlchemyUniversity/blockexplorer/src/App.js\",\n  _s = $RefreshSig$();\nimport { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\nimport './App.css';\n// import { ListItem, ListItemText } from '@mui/material';\n// import List from '@mui/material/List';\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET\n};\n\n// In this week's lessons we used ethers.js. Here we are using the\n// Alchemy SDK is an umbrella library with several different packages.\n//\n// You can read more about the packages here:\n//   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\nfunction App() {\n  _s();\n  const [blockNumber, setBlockNumber] = useState();\n  const [blockDetails, setBlockDetails] = useState();\n  const [blockTransactions, setBlockTransactions] = useState([]);\n  const [transactionType, setTransactionType] = useState([]);\n  const [combinedArray, setCombinedArray] = useState([]);\n  useEffect(() => {\n    async function getBlockNumber() {\n      setBlockNumber(await alchemy.core.getBlockNumber());\n    }\n    getBlockNumber();\n  }, []);\n  useEffect(() => {\n    async function getBlockDetails() {\n      try {\n        let listTransactions = [];\n        const data = await alchemy.core.getBlock(blockNumber);\n        //console.log(data);\n        data[\"transactions\"].forEach((transaction, index) => {\n          listTransactions.push(transaction);\n        });\n        setBlockDetails(data);\n        setBlockTransactions(listTransactions);\n      } catch (error) {\n        setBlockDetails([]);\n      }\n    }\n    async function getTransactionDetails(blockTransactions) {\n      try {\n        let types = [];\n        let transData = [];\n        for (let i = 0; i < blockTransactions.length; i++) {\n          transData = await alchemy.core.getTransactionReceipt(blockTransactions[i]);\n          //console.log(transData);\n          types.push(transData[\"type\"]);\n        }\n        console.log(types);\n        setTransactionType(types);\n      } catch (error) {\n        setTransactionType([]);\n      }\n    }\n    function reduceDataToSingleArray(blockTransactions, transactionType) {\n      const reducedArray = blockTransactions.reduce((arr, current, index) => {\n        return [...arr, [current, transactionType[index]]];\n      }, []);\n      //console.log(combinedArray);\n      setCombinedArray(reducedArray);\n    }\n    getBlockDetails();\n    getTransactionDetails(blockTransactions);\n    reduceDataToSingleArray(blockTransactions, transactionType);\n\n    // console.log(blockTransactions);\n  }, [blockNumber, setBlockDetails, setBlockTransactions, blockTransactions], transactionType);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BlockDetails\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Block Number: \", blockNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Time stamp: \", !blockDetails ? 'Loading' : blockDetails['timestamp']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [\"Miner: \", !blockDetails ? 'Loading' : blockDetails['miner']]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"TransactionsList\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Transaction Hash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }, this), combinedArray.map((value, index) => {\n          /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"item\",\n              children: value[0]\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"item\",\n              children: value[1]\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 9\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"E2ykaHlafWogsmi1H2tci76fahc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Alchemy","Network","useEffect","useState","settings","apiKey","process","env","REACT_APP_ALCHEMY_API_KEY","network","ETH_MAINNET","alchemy","App","blockNumber","setBlockNumber","blockDetails","setBlockDetails","blockTransactions","setBlockTransactions","transactionType","setTransactionType","combinedArray","setCombinedArray","getBlockNumber","core","getBlockDetails","listTransactions","data","getBlock","forEach","transaction","index","push","error","getTransactionDetails","types","transData","i","length","getTransactionReceipt","console","log","reduceDataToSingleArray","reducedArray","reduce","arr","current","map","value"],"sources":["/Users/dayanperera/Documents/Programming/AlchemyUniversity/blockexplorer/src/App.js"],"sourcesContent":["import { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\n\nimport './App.css';\n// import { ListItem, ListItemText } from '@mui/material';\n// import List from '@mui/material/List';\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET,\n};\n\n\n// In this week's lessons we used ethers.js. Here we are using the\n// Alchemy SDK is an umbrella library with several different packages.\n//\n// You can read more about the packages here:\n//   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\n\nfunction App() {\n  const [blockNumber, setBlockNumber] = useState();\n  const [blockDetails, setBlockDetails] = useState();\n  const [blockTransactions, setBlockTransactions] = useState([]);\n  const [transactionType, setTransactionType] = useState([]);\n  const [combinedArray, setCombinedArray] = useState([]);\n\n  useEffect(() => {\n\n    async function getBlockNumber() {\n      setBlockNumber(await alchemy.core.getBlockNumber());\n    }\n    getBlockNumber();\n\n  }, []);\n\n  useEffect(() => {\n    async function getBlockDetails(){\n      try{\n        let listTransactions = [];\n        const data = await alchemy.core.getBlock(blockNumber);\n        //console.log(data);\n        data[\"transactions\"].forEach((transaction, index)=>{\n          listTransactions.push(transaction);\n        });\n        setBlockDetails(data);\n        setBlockTransactions(listTransactions);\n      }catch(error){\n        setBlockDetails([]);\n      }\n    }\n\n    async function getTransactionDetails(blockTransactions){\n      try{\n        let types=[];\n        let transData = [];\n        for(let i=0; i<blockTransactions.length; i++){\n          transData = await alchemy.core.getTransactionReceipt(blockTransactions[i]);\n          //console.log(transData);\n          types.push(transData[\"type\"]);\n        }\n        console.log(types)\n        setTransactionType(types);\n\n      }catch(error){\n        setTransactionType([]);\n      }\n    }\n\n    function reduceDataToSingleArray(blockTransactions, transactionType){\n\n      const reducedArray = blockTransactions.reduce((arr, current, index) => {\n        return [...arr, [current, transactionType[index]]];\n      }, []);\n      //console.log(combinedArray);\n      setCombinedArray(reducedArray);\n    }\n\n    getBlockDetails();\n    getTransactionDetails(blockTransactions);\n    reduceDataToSingleArray(blockTransactions, transactionType);\n\n    // console.log(blockTransactions);\n  }, [blockNumber, setBlockDetails, setBlockTransactions, blockTransactions], transactionType);\n\n  return(\n  <div className='App'>\n    <div className=\"BlockDetails\">\n      <div className='item'>Block Number: {blockNumber}</div>\n      <div className='item'>Time stamp: {!blockDetails ? 'Loading' : blockDetails['timestamp']}</div> \n      <div className='item'>Miner: {!blockDetails ? 'Loading' : blockDetails['miner']}</div>\n    </div>\n    <table className='TransactionsList'>\n      <tbody>\n      <tr>\n        <th>Transaction Hash</th>\n        <th>Type</th>\n      </tr>\n      {\n      combinedArray.map((value, index)=> {\n        <tr>\n          <td key={index} className=\"item\">{value[0]}</td>\n          <td key={index} className=\"item\">{value[1]}</td>\n        </tr>\n    })\n      }\n      </tbody>\n    </table>\n  </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}